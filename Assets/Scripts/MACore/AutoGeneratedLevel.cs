using System.Collections.Generic;
using UnityEngine;
using System;

namespace MACore
{
	public class AutoGeneratedLevel : Level
	{
		[HideInInspector]
		public float difficulty;
		private readonly float MAX_DIFFICULTY = 25.0f;
		private readonly float MAX_MONSTERID  = 3.0f;
		
		/// <summary>
		/// Start this instance.
		/// </summary>
		public override void Start()
		{
			// Generate all the waves
			Generate();
			base.Start();
		}
		
		/// <summary>
		/// Generate this instance.
		/// </summary>
		private void Generate()
		{
			waves = new List<Wave>();
			difficulty = Mathf.Min(id/MAX_DIFFICULTY, 1);
			
			// First, determine the duration
			duration = 15 + difficulty*10;
			
			float waveCount = 3 + difficulty*12;
			
			float diffPerWave = 1/MAX_DIFFICULTY/waveCount;
			
			float currentDifficulty = difficulty;
			for( int w=0;w<waveCount;w++ )
			{
				Wave wave = GenerateWave(w, waveCount, currentDifficulty);
				currentDifficulty	+= diffPerWave;
				currentDifficulty = Mathf.Min(1, currentDifficulty);
				
				waves.Add(wave);
			}
		}
		
		private Wave GenerateWave(int waveId, float waveCount, float difficulty)
		{
			Wave wave = new Wave();
			
			// The greater the difficulty, the bigger the monster
			wave.spawnTime 	= waveId/waveCount;
			//wave.type	

			wave.type			= GetMonsterType(wave.spawnTime, difficulty);
			wave.count			= GetMonsterCount(wave.type, difficulty);
			
			return wave;
		}
		
		private EMonsterType GetMonsterType(float percent, float difficulty)
		{
			// Number between 0 and 1
			float monsterId 	= Mathf.Abs(Mathf.Sin( percent * Mathf.PI));
			EMonsterType type 	= (EMonsterType) Mathf.Round((monsterId * ((int)GetMaxMonster())));
			
			Debug.LogWarning("MonserId: " + monsterId + " Type: " + type );
			return type;
		}
		
		/// <summary>
		/// Gets the biggest monster for this level
		/// </summary>
		/// <returns>
		/// The max monster.
		/// </returns>
		private EMonsterType GetMaxMonster()
		{
			// Get the max monster
			if( id < 3 )
				return EMonsterType.Weenie;
			
			if( id <= 8 )
				return EMonsterType.Vector;
			
			if( id <= 13 )
				return EMonsterType.Heap;
			
			return EMonsterType.Kobol;
		}
		
		private int GetMonsterCount(EMonsterType type, float difficulty)
		{
			switch( type )
			{
				case EMonsterType.Weenie:
					return (int)Mathf.Round(3 + (difficulty*24));
				
				case EMonsterType.Vector:
					return (int)Mathf.Round(1 + (difficulty*12));
				
				case EMonsterType.Heap:
					return (int)Mathf.Round(1 + (difficulty*6));				
				
				case EMonsterType.Kobol:
					return (int)Mathf.Round(1 + (difficulty*3));
			}
			return 1;
		}
		
		
		
	}
}

